import com.bmuschko.gradle.docker.tasks.container.DockerCopyFileFromContainer
import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper
import java.time.format.DateTimeFormatter

plugins {
	id "com.avast.gradle.docker-compose" version "0.17.10"
}

File projectDir = project.projectDir as File

class Config {
	public List<String> hotfixURLs = new ArrayList<String>()
	public String namespace
	public List<String> composeFiles = new ArrayList<String>()
	public List<String> composeProfiles = new ArrayList<String>()
	public String databaseName
	public String dataDirectory
	public String liferayDockerImageId
	public int liferayDebugPort
	public int liferayTelnetPort

	@Override
	public String toString() {

		return """

Config:
------------------------
hotfixURLs: ${hotfixURLs}
namespace: ${namespace}
composeFiles: ${composeFiles}
composeProfiles: ${composeProfiles}
databaseName: ${databaseName}
dataDirectory: ${dataDirectory}
liferayDockerImageId: ${liferayDockerImageId}

"""
	}
}

Config config = new Config()

config.composeFiles.add("docker-compose.yaml")

/*
--- BEGIN User configuration
 */

config.composeFiles.addAll([
])
config.composeProfiles.addAll([
	"liferay",

	"mysql",
])
config.hotfixURLs.addAll([
	// "https://releases-cdn.liferay.com/dxp/hotfix/2024.q2.7/liferay-dxp-2024.q2.7-hotfix-4.zip",
])
config.namespace = project.name
config.databaseName = "lportal"
config.dataDirectory = "data"
config.liferayDebugPort = 8000
config.liferayTelnetPort = 11311
config.liferayDockerImageId = gradle.liferayWorkspace.dockerImageId as String

/*
--- END User configuration
 */


static boolean isEmpty(List list) {
	if (list == null) {
		return true;
	}

	if (list.isEmpty()) {
		return true;
	}

	return false;
}
static boolean isNotEmpty(List list) {
	return !isEmpty(list)
}

JsonSlurper jsonSlurper = new JsonSlurper()

File configFile = project.file("config.json")

if (configFile.exists()) {
	Object configFileObject = jsonSlurper.parseText(configFile.text)

	List composeProfiles = configFileObject.composeProfiles as List
	String databaseName = configFileObject.databaseName as String
	String dataDirectory = configFileObject.dataDirectory as String
	List hotfixURLs = configFileObject.hotfixURLs as List
	String namespace = configFileObject.namespace as String

	if (isNotEmpty(composeProfiles)) {
		config.composeProfiles = composeProfiles
	}

	if (databaseName != null) {
		config.databaseName = databaseName
	}

	if (dataDirectory != null && dataDirectory.length() > 0) {
		config.dataDirectory = dataDirectory
	}

	if (isNotEmpty(hotfixURLs)) {
		config.hotfixURLs = hotfixURLs
	}

	if (namespace != null) {
		config.namespace = namespace
	}
}

ConfigurableFileTree dockerComposeFileTree = project.fileTree(projectDir) {
	include "**/docker-compose.*.yaml"
}

List<String> possibleProfiles = dockerComposeFileTree.collect {
	File file ->

	file.name.substring("docker-compose.".length(), file.name.indexOf(".yaml"))
} as List<String>

List<String> composeProfileFiles = config.composeProfiles.collect {
	String profile ->

	FileTree matchingFileTree = dockerComposeFileTree.matching {
		include "**/docker-compose.${profile}.yaml"
	}

	if (matchingFileTree.isEmpty()) {
		throw new GradleException(
			"The profile '${profile}' does not have a matching docker-compose file. Possible profiles are: ${possibleProfiles}");
	}

	projectDir.relativePath(matchingFileTree.singleFile as File)
}

config.composeFiles.addAll(composeProfileFiles)

tasks.register("exportContainerData", DockerCopyFileFromContainer) {
	containerId = "${config.namespace}-data-helper"

	doFirst {
		mkdir hostPath.get()
	}

	hostPath = provider {
		DateTimeFormatter formatter = DateTimeFormatter.
			ofPattern("yyyyMMdd.HHmmss").
			withZone(ZoneId.systemDefault())

		"exported_data/data_${formatter.format(Instant.now())}"
	}

	remotePath = "/data/container-data"

}
tasks.register("prepareDataDirectory") {
	doFirst {
		mkdir "helper/data"

		copy {
			from config.dataDirectory
			include "**/*"
			into "helper/data"
		}
	}

	outputs.dir "helper/data"
}
tasks.register("prepareDumps") {
	doFirst {
		mkdir "helper/dumps"

		copy {
			from config.dataDirectory
			include "**/*"
			into "helper/dumps"
		}
	}

	outputs.dir "helper/dumps"
}
tasks.register("prepareHotfixes", Download) {
	dest project.layout.dir(project.provider {project.file("configs/common/patching")})
	onlyIf {
		!config.hotfixURLs.isEmpty()
	}
	src config.hotfixURLs
}
tasks.register("possibleProfiles") {
	description "Displays the possible profile names that can be used with docker-compose."
	doFirst {
		println "Possible profiles: ${possibleProfiles}"
	}
	group "help"
}

clean {
	dependsOn ":cleanPrepareDataDirectory"
	dependsOn ":cleanPrepareDumps"
	dependsOn ":cleanPrepareHotfixes"
}
dockerDeploy {
	dependsOn ":prepareDataDirectory"
	dependsOn ":prepareDumps"
	dependsOn ":prepareHotfixes"
}

composeUp {
	dependsOn ":buildDockerImage"

	doFirst {
		println "Using config: ${config}"
	}

	onlyIf {
		!config.composeFiles.isEmpty()
	}
}

dockerCompose {
	captureContainersOutput = true
	captureContainersOutputToFiles = project.file('containerLogs')

	environment.put "DATABASE_NAME", config.databaseName
	environment.put "LIFERAY_IMAGE_NAME", config.liferayDockerImageId
	environment.put "LIFERAY_DEBUG_PORT", config.liferayDebugPort
	environment.put "LIFERAY_TELNET_PORT", config.liferayTelnetPort
	environment.put "NAMESPACE", config.namespace

	// DEBUG: Set to false to retain volume data on restart
	removeVolumes = true

	tcpPortsToIgnoreWhenWaiting = [config.liferayDebugPort, config.liferayTelnetPort]
	useComposeFiles = config.composeFiles

	// DEBUG: Set to true if container startup is failing
	retainContainersOnStartupFailure = false
}